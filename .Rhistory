x = matrix(rnorm(10), 2, 5)
x
makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## Creates a matrix object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(solveMatrix) inv <<- solveMatrix
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
## Computes the inverse of the matrix returned by makeCacheMatrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv
}
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(makeCacheMatrix(x))
x = matrix(rnorm(16), 4, 4)
cacheSolve(makeCacheMatrix(x))
x = matrix(rnorm(16), 4, 4)
x
cacheSolve(makeCacheMatrix(x))
